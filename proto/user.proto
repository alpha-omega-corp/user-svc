syntax = "proto3";

package auth;

option go_package = "github.com/alpha-omega-corp/user-svc/proto";

service UserService {
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc Validate(ValidateRequest) returns (ValidateResponse) {}

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {}
  rpc GetRoles(GetRolesRequest) returns (GetRolesResponse) {}
  rpc AssignRole(AssignRoleRequest) returns (AssignRoleResponse) {}
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {}
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}

  rpc GetPermServices(GetPermServicesRequest) returns (GetPermServicesResponse) {}
  rpc CreatePermissions(CreatePermissionRequest) returns (CreatePermissionResponse) {}
  rpc GetPermissions(GetPermissionsRequest) returns (GetPermissionsResponse) {}
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse) {}
}

message GetUserPermissionsRequest {
  int64 userId = 1;
}

message GetUserPermissionsResponse {
  map<string, bool> matrix = 1;
}


message GetPermissionsRequest {
  int64 serviceId = 1;
}

message GetPermissionsResponse {
  repeated Permission permissions = 1;
}

message Permission {
  int64 id = 1;
  Role role = 2;
  Service service = 3;
  bool canRead = 4;
  bool canWrite = 5;
  bool canManage = 6;
}

message CreatePermissionResponse {
  int64 status = 1;
  string error = 2;
}

message CreatePermissionRequest {
  int64 roleId = 1;
  int64 serviceId = 2;
  bool canRead = 3;
  bool canWrite = 4;
  bool canManage = 5;
}

enum ServicesEnum {
  HOME = 0;
  ADMIN = 1;
  DOCKER = 2;
  PACKAGE = 3;
}
message Service {
  int64 id = 1;
  string name = 2;
}

message GetPermServicesRequest {}
message GetPermServicesResponse {
  repeated Service services = 1;
}

message UpdateUserRequest {
  int64 id = 1;
  string name = 2;
  repeated int64 roles = 3;
}

message UpdateUserResponse {
  int64 status = 1;
  string error = 2;
}

message AssignRoleRequest {
  int64 userId = 1;
  int64 roleId = 2;
}

message AssignRoleResponse {
  int64 status = 1;
  string error = 2;
}

message GetUsersRequest {}
message GetUsersResponse {
  repeated User users = 3;
}

message GetRolesRequest {}
message GetRolesResponse {
  repeated Role roles = 3;
}



message CreateRoleRequest {
  string name = 1;
}

message CreateRoleResponse {
  int64 status = 1;
  string error = 2;
}

message User {
  int64 id = 1;
  string email = 2;
  string name = 3;
  repeated Role roles = 4;
}

message RegisterRequest {
  string email = 1;
  string password = 2;
}

message RegisterResponse {
  int64 status = 1;
  string error = 2;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  int64 status = 1;
  string error = 2;
  string token = 3;
  User user = 4;
}

message ValidateRequest {string token = 1;}

message ValidateResponse {
  int64 status = 1;
  string error = 2;
  User user = 3;
}

message Role {
  int64 id = 1;
  string name = 2;
}